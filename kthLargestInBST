//
//data class Tree<T>(var value: T) {
//    var left: Tree<T>? = null;
//    var right: Tree<T>? = null;
//}

fun kthLargestInBST(t: Tree<Int>?, k: Int): Int {
    val list:MutableList<Tree<Int>> = ArrayList()
        val q = Queue(list)

        q.enqueue(t!!)
        val a: MutableList<Int> = ArrayList()
        while (q.count() > 0) {
            val x = q.dequeue()
            if (x != null) {
                a.add(x.value)
                if (x.left != null)
                    q.enqueue(x.left!!)
                if (x.right != null)
                    q.enqueue(x.right!!)
            }
        }
        a.sort()
        return a[k - 1]
}

   class Queue <T>(list:MutableList<T>){

        var items:MutableList<T> = list

        fun isEmpty():Boolean = this.items.isEmpty()

        fun count():Int = this.items.count()

        override  fun toString() = this.items.toString()

        fun enqueue(element: T){
            this.items.add(element)
        }

        fun dequeue():T?{
            if (this.isEmpty()){
                return null
            } else {
                return this.items.removeAt(0)
            }
        }

        fun peek():T?{
            return this.items[0]
        }

}
