fun simplifyPath(path: String): String {
    val ps = path.split('/')
        var p = ""

        val initialValue: MutableList<String> =  ArrayList()
        val st = Stack(initialValue)
        for (i in 0 until ps.size){
            if (ps[i] == ".."){
                if (st.count() > 0) st.pop()
            }else if (ps[i] != "." && ps[i] != "") st.push(ps[i])
        }
        for (x in st.items){
            p += "/" + x
        }
        return if (p.isNotEmpty()) p else "/"
}

class Stack<T:Comparable<T>>(list:MutableList<T>) {

        var items: MutableList<T> = list


        fun isEmpty():Boolean = this.items.isEmpty()

        fun count():Int = this.items.count()

        fun push(element:T) {
            val position = this.count()
            this.items.add(position, element)
        }

        override  fun toString() = this.items.toString()

        fun pop():T? {
            if (this.isEmpty()) {
                return null
            } else {
                val item =  this.items.count() - 1
                return this.items.removeAt(item)
            }
        }

        fun peek():T? {
            if (isEmpty()) {
                return null
            } else {
                return this.items[this.items.count() - 1]
            }
        }

}
